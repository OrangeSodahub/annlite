name: CI

on:
  pull_request:

jobs:

  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: check black
        run: ./scripts/black.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  prep-testbed:
    runs-on: ubuntu-latest
    needs: [commit-lint, check-black]
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        cibw_arch: ["auto64"]
        cpython-version: ["cp37-*"]
    steps:
      - uses: actions/checkout@v3
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.10.2
        with:
          package-dir: ./
        env:
          CIBW_ENVIRONMENT: >
            STAN_BACKEND="${{ env.STAN_BACKEND }}"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BUILD: ${{ matrix.cpython-version }}
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BUILD_FRONTEND: build
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  core-test:
    needs: [prep-testbed, build-wheels, build-sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          pip install jina
          pip install cibuildwheel
          pip install --pre docarray
          pip install pytest pytest-html pytest-cov pytest-mock pytest-repeat pytest-custom-exit-code pytest-timeout pytest-reraise
      - name: Install annlite unix
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          pip install dist/*linux*.whl
      - name: Install annlite win
        if: ${{ matrix.os == 'windows-latest'}}
        run: |
          pip install --find-links=dist/ annlite
      - name: Test unix
        id: test_unix
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        env:
          OPENBLAS_CORETYPE: ARMV8
        run: |
          cd ..
          mv annlite/tests/ ./
          pytest --suppress-no-test-exit-code --cov=annlite --cov-report=xml \
          -v -s -m "not gpu" ${{ matrix.test-path }}
          echo "::set-output name=codecov_flag::annlite"
        timeout-minutes: 30
      - name: Test win
        id: test_win
        if: ${{ matrix.os == 'windows-latest'}}
        env:
          PYTHONIOENCODING: 'utf-8'
        run: |
          cd ..
          move annlite/tests/ ./
          cd tests/
          pytest -v -s -m "not gpu" -k "test"
          echo "::set-output name=codecov_flag::annlite"
        timeout-minutes: 30

  prerelease:
    needs: [core-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
#      - uses: actions/download-artifact@v3
#        with:
#          name: artifact
#          path: dist
      - name: Pre-release (.devN)
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          pip install twine wheel build
          ./scripts/release.sh
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
